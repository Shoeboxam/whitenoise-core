/* Generated with cbindgen:0.9.1 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct {
  int64_t len;
  uint8_t *data;
} ByteBuffer;

ByteBuffer compute_privacy(const uint8_t *analysis_ptr,
                           int32_t analysis_length,
                           const uint8_t *release_ptr,
                           int32_t release_length);

ByteBuffer compute_sensitivities(const uint8_t *analysis_ptr,
                                 int32_t analysis_length,
                                 const uint8_t *release_ptr,
                                 int32_t release_length);

ByteBuffer from_accuracy(const uint8_t *analysis_ptr,
                         int32_t analysis_length,
                         const uint8_t *release_ptr,
                         int32_t release_length,
                         const uint8_t *accuracy_ptr,
                         int32_t accuracy_length);

ByteBuffer generate_report(const uint8_t *analysis_ptr,
                           int32_t analysis_length,
                           const uint8_t *release_ptr,
                           int32_t release_length);

ByteBuffer infer_constraints(const uint8_t *analysis_ptr,
                             int32_t analysis_length,
                             const uint8_t *release_ptr,
                             int32_t release_length,
                             const uint8_t *constraints_ptr,
                             int32_t constraints_length);

ByteBuffer to_accuracy(const uint8_t *analysis_ptr,
                       int32_t analysis_length,
                       const uint8_t *release_ptr,
                       int32_t release_length);

ByteBuffer validate_analysis(const uint8_t *analysis_ptr, int32_t analysis_length);

ByteBuffer validate_analysis_openapi(const uint8_t *analysis_ptr, int32_t analysis_length);
